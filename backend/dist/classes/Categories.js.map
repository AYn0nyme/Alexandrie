{"version":3,"file":"Categories.js","sourceRoot":"","sources":["../../classes/Categories.ts"],"names":[],"mappings":";;;AAAA,0DAA0B;AAI1B,MAAqB,YAAa,SAAQ,cAAI;IAC5C,YAAY,GAAQ;QAClB,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAe,6CAA6C,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;gBACjG,IAAI,GAAG;oBAAE,OAAO,MAAM,CAAC,0BAA0B,CAAC,CAAC;gBACnD,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,GAAG,CAAC,IAA0B;QACnC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC;YACpD,IAAI,CAAC,IAAI,CAAC,IAAI;gBAAE,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC,CAAC;YAClF,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CACf,2FAA2F,EAC3F,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,EACtD,GAAG,CAAC,EAAE;gBACJ,IAAI,GAAG;oBAAE,OAAO,MAAM,CAAC,0BAA0B,CAAC,CAAC;;oBAC9C,OAAO,CAAC,EAAE,EAAE,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;YAChC,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,IAAc;QACnB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAAE,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;YAC9E,IAAI,CAAC,IAAI,CAAC,IAAI;gBAAE,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC,CAAC;YAElF,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CACf,mFAAmF,EACnF,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,EAC3D,GAAG,CAAC,EAAE;gBACJ,IAAI,GAAG;oBAAE,OAAO,MAAM,CAAC,0BAA0B,CAAC,CAAC;;oBAC9C,OAAO,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,EAAkB;QAC9B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,EAAE;gBAAE,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,qCAAqC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE;gBACnE,IAAI,GAAG;oBAAE,OAAO,MAAM,CAAC,0BAA0B,CAAC,CAAC;;oBAC9C,OAAO,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAtDD,+BAsDC","sourcesContent":["import Base from './Base';\nimport type { App } from '../app';\nimport type { Category, CategoryDB } from '../types';\n\nexport default class CategoriesDB extends Base {\n  constructor(app: App) {\n    super(app);\n  }\n\n  public getAll(): Promise<Category[]> {\n    return new Promise((resolve, reject) => {\n      this.app.db.query<CategoryDB[]>('SELECT * FROM `categories` ORDER BY `order`', [], (err, themes) => {\n        if (err) return reject('Internal database error.');\n        resolve(themes);\n      });\n    });\n  }\n\n  public add(data: Omit<Category, 'id'>): Promise<Category> {\n    return new Promise((resolve, reject) => {\n      const id = this.app.snowflake.generate().toString();\n      if (!data.name) return reject(new Error('[MISSING_KEY] : name must be provided'));\n      this.app.db.query(\n        'INSERT INTO categories (`id`, `name`,`icon`, `order`, `parent_id`) VALUES (?, ?, ?, ?, ?)',\n        [id, data.name, data.icon, data.order, data.parent_id],\n        err => {\n          if (err) return reject('Internal database error.');\n          else resolve({ id, ...data });\n        },\n      );\n    });\n  }\n\n  update(data: Category): Promise<Category> {\n    return new Promise((resolve, reject) => {\n      if (!data.id) return reject(new Error('[MISSING_KEY] : id must be provided'));\n      if (!data.name) return reject(new Error('[MISSING_KEY] : name must be provided'));\n\n      this.app.db.query(\n        'UPDATE categories SET name = ?, icon = ?, `order` = ?, parent_id = ? WHERE id = ?',\n        [data.name, data.icon, data.order, data.parent_id, data.id],\n        err => {\n          if (err) return reject('Internal database error.');\n          else resolve(data);\n        },\n      );\n    });\n  }\n\n  public delete(id: Category['id']): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_KEY] : id must be provided'));\n      this.app.db.query('DELETE FROM categories WHERE id = ?', [id], err => {\n        if (err) return reject('Internal database error.');\n        else resolve(true);\n      });\n    });\n  }\n}\n"]}