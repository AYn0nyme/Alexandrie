{"version":3,"file":"DocumentsManager.js","sourceRoot":"","sources":["../../classes/DocumentsManager.ts"],"names":[],"mappings":"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","sourcesContent":["import Base from './Base';\nimport type { App } from '../app';\nimport type { Document, DocumentDB } from '../types';\n\nexport default class DocumentsManager extends Base {\n  constructor(app: App) {\n    super(app);\n  }\n\n  public getAll() {\n    return new Promise<Document[]>(async (resolve, reject) => {\n      this.app.db.query<DocumentDB[]>('SELECT * FROM documents WHERE `accessibility` = 1 ORDER BY `name`', (err, result) => {\n        if (err) return reject('Internal database error.');\n        resolve(result);\n      });\n    });\n  }\n\n  public getAllByCategory(category: string) {\n    return new Promise<Document[]>((resolve, reject) => {\n      if (!category) return reject(new Error('[MISSING_KEY] : category must be provided'));\n      this.app.db.query<DocumentDB[]>(\n        'SELECT * FROM documents WHERE category = ? AND `accessibility` = 1 ORDER BY `name`',\n        [category],\n        (err, result) => {\n          if (err) return reject('Internal database error.');\n          resolve(result);\n        },\n      );\n    });\n  }\n  get(id: string) {\n    return new Promise<Document>((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_KEY] : id must be provided'));\n      this.app.db.query<DocumentDB[]>('SELECT * FROM documents WHERE id = ?', [id], (err, result) => {\n        if (err) return reject('Internal database error.');\n        if (!result[0]) return reject('Document not found.');\n        resolve(result[0]);\n      });\n    });\n  }\n  public add(data: Omit<Document, 'id' | 'created_timestamp' | 'updated_timestamp'>) {\n    return new Promise((resolve, reject) => {\n      const time = Date.now().toString();\n      const id = this.app.snowflake.generate().toString();\n      if (!data.name) return reject(new Error('[MISSING_KEY] : name must be provided'));\n      if (!data.accessibility && data.accessibility != 0)\n        return reject(new Error('[MISSING_KEY] : accessibility must be provided'));\n      if (!data.author_id) return reject(new Error('[MISSING_KEY] : author_id must be provided'));\n\n      this.app.db.query<DocumentDB[]>(\n        'INSERT INTO documents (`id`, `name`, `description`, `tags`, `category`, `accessibility`, `content_markdown`, `content_html`, `author_id`, `created_timestamp`, `updated_timestamp`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',\n        [\n          id,\n          data.name,\n          data.description,\n          data.tags,\n          data.category,\n          data.accessibility,\n          data.content_markdown,\n          data.content_html,\n          data.author_id,\n          time,\n          time,\n        ],\n        err => {\n          if (err) return reject('Internal database error.');\n          resolve({ id, ...data, created_timestamp: time, updated_timestamp: time });\n        },\n      );\n    });\n  }\n  public put(id: string, data: Omit<Document, 'id' | 'created_timestamp' | 'updated_timestamp'>) {\n    return new Promise((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_KEY] : id must be provided'));\n      if (!data.name) return reject(new Error('[MISSING_KEY] : name must be provided'));\n      if (!data.accessibility && data.accessibility != 0)\n        return reject(new Error('[MISSING_KEY] : accessibility must be provided'));\n      if (!data.author_id) return reject(new Error('[MISSING_KEY] : author_id must be provided'));\n      const time = Date.now().toString();\n      this.app.db.query<DocumentDB[]>(\n        'UPDATE documents SET name = ?, description = ?, tags = ?, category = ?, accessibility = ?, content_markdown = ?, content_html = ?, updated_timestamp = ? WHERE id = ?',\n        [\n          data.name,\n          data.description,\n          data.tags,\n          data.category,\n          data.accessibility,\n          data.content_markdown,\n          data.content_html,\n          time,\n          id,\n        ],\n        err => {\n          if (err) return reject('Internal database error.');\n          resolve({ id, ...data, updated_timestamp: time });\n        },\n      );\n    });\n  }\n\n  public delete(id: string) {\n    return new Promise((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_KEY] : id must be provided'));\n      this.app.db.query<DocumentDB[]>('DELETE FROM documents WHERE id = ?', [id], err => {\n        if (err) return reject('Internal database error.');\n        resolve(true);\n      });\n    });\n  }\n}\n"]}