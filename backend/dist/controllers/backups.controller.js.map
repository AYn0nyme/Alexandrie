{"version":3,"file":"backups.controller.js","sourceRoot":"","sources":["../../controllers/backups.controller.ts"],"names":[],"mappings":";;AAAA,2BAAgE;AAChE,iDAAsC;AAItC,kDAAoD;AAEpD,MAAqB,oBAAoB;IAEvC,YAAY,GAAQ;QADpB;;;;;WAAS;QAEP,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,CAAU,EAAE,GAAa;QACjC,8BAA8B;QAC9B,MAAM,KAAK,GAAG,IAAA,gBAAW,EAAC,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC,CAAC;QAC7D,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAAE,IAAA,eAAU,EAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,YAAY,IAAI,EAAE,CAAC,CAAC;SAClF;QACD,MAAM,IAAI,GAAG,UAAU,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAC9E,MAAM,SAAS,GAAG,IAAA,qBAAK,EAAC,WAAW,EAAE;YACnC,IAAI;YACJ,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE;YAC9B,KAAK,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE;YACpC,YAAY;SACb,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,IAAA,sBAAiB,EAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,YAAY,IAAI,MAAM,CAAC,CAAC;QACjF,MAAM,aAAa,GAAG,IAAI,OAAO,CAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnE,SAAS,CAAC,MAAM;iBACb,IAAI,CAAC,OAAO,CAAC;iBACb,EAAE,CAAC,QAAQ,EAAE;gBACZ,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC;iBACD,EAAE,CAAC,OAAO,EAAE,UAAU,GAAG;gBACxB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,aAAa;aACV,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAA,mBAAO,EAAC,EAAE,GAAG,EAAE,YAAY,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC;aAC9D,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAA,iBAAK,EAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;CACF;AAnCD,uCAmCC","sourcesContent":["import { createWriteStream, unlinkSync, readdirSync } from 'fs';\nimport { spawn } from 'child_process';\n\nimport type { Request, Response } from 'express';\nimport type { App } from '../app';\nimport { error, success } from '../utils/functions';\n\nexport default class CategoriesController {\n  app: App;\n  constructor(app: App) {\n    this.app = app;\n  }\n\n  async add(_: Request, res: Response) {\n    // Clean the uploads directory\n    const files = readdirSync(this.app.uploads_dir + '/backups');\n    for (const file of files) {\n      if (file.endsWith('.sql')) unlinkSync(`${this.app.uploads_dir}/backups/${file}`);\n    }\n    const name = `backup-${new Date().toISOString().split('T')[0]}-${Date.now()}`;\n    const mysqldump = spawn('mysqldump', [\n      '-u',\n      `${process.env.DATABASE_USER}`,\n      `-p${process.env.DATABASE_PASSWORD}`,\n      'alexandrie',\n    ]);\n\n    const wstream = createWriteStream(`${this.app.uploads_dir}/backups/${name}.sql`);\n    const backupPromise = new Promise<void | string>((resolve, reject) => {\n      mysqldump.stdout\n        .pipe(wstream)\n        .on('finish', function () {\n          resolve();\n        })\n        .on('error', function (err) {\n          reject(err.message);\n        });\n    });\n    backupPromise\n      .then(() => res.json(success({ url: `/backups/${name}.sql` })))\n      .catch((err: Error) => res.json(error(err.message)));\n  }\n}\n"]}